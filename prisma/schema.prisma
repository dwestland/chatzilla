generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

// next-auth
model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
  @@index([userId])
}

// next-auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

// next-auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  role Role     @default(USER)

  accounts  Account[]
  sessions  Session[]
  blogs     Blogs[]

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map("users")
}

// next-auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
model Demo {
  id              Int     @id @default(autoincrement())
  businessName    String? @map(name: "business_name")
  slug            String? @unique
  typeOfBusiness  String? @map(name: "type_of_business")
  greeting        String? @db.Text
  managerName     String? @map(name: "manager_name")
  managerBio      String? @db.Text @map(name: "manager_bio")
  email           String?
  phone           String?
  address         String? @db.Text
  websiteUrl      String? @map(name: "website_url")
  businessHours   String? @db.Text @map(name: "business_hours")
  bookingLink     String? @map(name: "booking_link")
  servicesOffered String? @db.Text @map(name: "services_offered")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "demo")
}

model Blogs {
  id    Int    @id @default(autoincrement())
  title String
  body  String

  author   User @relation(fields: [authorId], references: [id])
  authorId String  @map(name: "author_id")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "blogs")
  @@index([authorId])
}

enum Role {
  USER
  CUSTOMER
  ADMIN
}
